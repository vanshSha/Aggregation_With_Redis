spring.application.name=airline-use-case
# Logging format
logging.pattern.console=[Kafka Stream] %clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}
spring.main.banner-mode=off
spring.kafka.bootstrap-servers=localhost:9092
auto.create.topics.enable=true
spring.kafka.consumer.group-id=kafka-stream-cg
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# this is kafkaStreamConfig
spring.kafka.streams.application-id=kafka_ms_streams
spring.kafka.streams.bootstrap-servers=localhost:9092
spring.kafka.streams.properties.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.kafka.streams.properties.default.value.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.kafka.streams.processing.guarantee=exactly_once_v2
spring.kafka.producer.properties.spring.json.trusted.packages=*
spring.kafka.streams.properties.spring.json.trusted.packages=*

# this line does while deserialize if a bad message e.g "" then skip that message
spring.kafka.streams.properties.default.deserialization.exception.handler=org.apache.kafka.streams.errors.LogAndContinueExceptionHandler

# Let Streams auto-create internal topics with compaction + infinite retention
spring.kafka.streams.properties.cleanup.policy=compact
spring.kafka.streams.properties.retention.ms=-1

# My redis properties
#spring.cache.type=redis
#spring.redis.host=127.0.0.1
#spring.redis.port=6379
#spring.redis.password=mac